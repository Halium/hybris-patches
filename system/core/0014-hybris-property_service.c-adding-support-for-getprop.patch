From d73710433e2caae05c34eab500ac981b4caabbb3 Mon Sep 17 00:00:00 2001
From: Ricardo Salveti de Araujo <ricardo.salveti@canonical.com>
Date: Thu, 31 Oct 2013 12:19:19 +0200
Subject: [PATCH] (hybris) property_service.c: adding support for getprop and
 listprop
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Change-Id: Ie5fbdb55c48038ce8250f27500623b3b81cc5cd1
Signed-off-by: Jani Monoses <jani@ubuntu.com>
Signed-off-by: Ricardo Salveti de Araujo <ricardo.salveti@canonical.com>
Signed-off-by: Bj√∂rn Bidar <theodorstormgrade@gmail.com>

Conflicts:
	init/property_service.c

Conflicts:
	init/property_service.cpp

-----

(hybris) Fix list and get properties.

Change-Id: I9deb65f147e941fc5c9f91793f851440d02260e1
---
 init/property_service.cpp | 61 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 61 insertions(+)

diff --git a/init/property_service.cpp b/init/property_service.cpp
index 2691a82254..f6fb20e340 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -262,6 +262,12 @@ class AsyncRestorecon {
     std::queue<std::string> paths_;
     bool thread_started_ = false;
 };
+// Legacy definition
+typedef struct prop_msg_s {
+    unsigned cmd;
+    char name[PROP_NAME_MAX];
+    char value[PROP_VALUE_MAX];
+} prop_msg_t;
 
 class SocketConnection {
   public:
@@ -310,6 +316,17 @@ class SocketConnection {
         return result == sizeof(value);
     }
 
+    bool SendLegacyPropMsg(std::string name, std::string value) {
+        int result = 0;
+        prop_msg_t prop_msg;
+        memset(&prop_msg, 0, sizeof(prop_msg_t));
+        prop_msg.cmd = 0;
+        strlcpy(prop_msg.name, name.c_str(), PROP_NAME_MAX);
+        strlcpy(prop_msg.value, value.c_str(), PROP_VALUE_MAX);
+        result = TEMP_FAILURE_RETRY(send(socket_, &prop_msg, sizeof(prop_msg_t), 0));
+        return (result == sizeof(prop_msg_t));
+    }
+
     bool GetSourceContext(std::string* source_context) const {
         char* c_source_context = nullptr;
         if (getpeercon(socket_, &c_source_context) != 0) {
@@ -553,6 +570,9 @@ uint32_t (*property_set)(const std::string& name, const std::string& value) = In
 static void handle_property_set_fd() {
     static constexpr uint32_t kDefaultSocketTimeout = 2000; /* ms */
 
+    char rproperty[PROP_VALUE_MAX];
+    const prop_info *pi;
+
     int s = accept4(property_set_fd, nullptr, nullptr, SOCK_CLOEXEC);
     if (s == -1) {
         return;
@@ -639,7 +659,48 @@ static void handle_property_set_fd() {
         socket.SendUint32(result);
         break;
       }
+    case PROP_MSG_GETPROP: {
+        int ret;
+        char prop_name[PROP_NAME_MAX];
+        char prop_value[PROP_VALUE_MAX];
+
+        /* Need to receive both since libhybris sends prop_msg_t type package. */
+        if (!socket.RecvChars(prop_name, PROP_NAME_MAX, &timeout_ms) ||
+            !socket.RecvChars(prop_value, PROP_VALUE_MAX, &timeout_ms)) {
+            PLOG(ERROR) << "sys_prop(PROP_MSG_GETPROP): error while reading name from the socket";
+            return;
+        }
+
+        prop_name[PROP_NAME_MAX-1] = 0;
+        prop_value[PROP_VALUE_MAX-1] = 0;
 
+        if (!IsLegalPropertyName(prop_name)) {
+            PLOG(ERROR) << "sys_prop(PROP_MSG_GETPROP): illegal property name. Got: " << prop_name;
+            return;
+        }
+
+        /* If we have a value, copy it over, otherwise returns the default */
+        ret = __system_property_get(prop_name, rproperty);
+        if (ret) {
+            strlcpy(prop_value, rproperty, sizeof(prop_value));
+        }
+
+        /* Send the property value back */
+        //TEMP_FAILURE_RETRY(send(s, &msg, sizeof(msg), 0));
+        socket.SendLegacyPropMsg(prop_name, prop_value);
+        break;
+      }
+    case PROP_MSG_LISTPROP: {
+        char prop_name[PROP_NAME_MAX];
+        char prop_value[PROP_VALUE_MAX];
+        for(int n = 0; (pi = __system_property_find_nth(n)); n++) {
+            prop_name[0] = prop_value[0] = 0;
+            __system_property_read(pi, prop_name, prop_value);
+            //TEMP_FAILURE_RETRY(send(s, &msg, sizeof(msg), 0));
+            socket.SendLegacyPropMsg(prop_name, prop_value);
+        }
+        break;
+      }
     default:
         LOG(ERROR) << "sys_prop: invalid command " << cmd;
         socket.SendUint32(PROP_ERROR_INVALID_CMD);
-- 
2.35.1

